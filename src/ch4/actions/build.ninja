#
# Variables
#
grammar = Rows
outdir = out
antlrdir = antlr
testdir = test

#
# NOTE: the use of $outdir in the classpath.  This is so that when the 
# testcode is built, it can reference the .class files built earlier.
#
#
# github codespace
#CLASSPATH=.:/workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$antlrdir
# macos terminal
# TODO: Do we need the $outdir/$antlrdir because no class files are there.
CLASSPATH = .:/Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$antlrdir

# ninja does not respect shell aliases
# github code space
#antlr4 = java -jar /workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir
# macos terminal
antlr4 = java -jar /Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir

# grun
grun = java org.antlr.v4.runtime.misc.TestRig


##############################
# Rules
##############################

# rule to transform *.g4 files into *java, *.interp and *.tokens files
# $in comes from the build statement which uses this rule.
#
# NOTE: This sample adds the --no-listener switch.
# Since -no-visitor (which is the second type) is the 
# default, in this case we do not make listener
# or visitor code.
rule antlr_r
  command = $antlr4 -no-listener $in
  description = Converts grammar .g4 file into java source files


#
# rule to compile java code
#
rule jc
  command = javac -d $outdir --class-path $CLASSPATH $in
  description = compiles java and puts classes in the out dir



##############################
# Build Statements
##############################

# build grammar
#
build $
$outdir/$antlrdir/${grammar}.interp $
$outdir/$antlrdir/${grammar}Lexer.interp $
$outdir/$antlrdir/${grammar}.tokens $
$outdir/$antlrdir/${grammar}Lexer.tokens $
$outdir/$antlrdir/${grammar}Lexer.java $
$outdir/$antlrdir/${grammar}Parser.java $
$outdir/$antlrdir $
: antlr_r $antlrdir/${grammar}.g4





# build ${grammar}Lexer.java
#
build $
$outdir/${grammar}Lexer.class $
: jc $
$outdir/$antlrdir/${grammar}Lexer.java

#
# build ${grammar}Parser.java and its derived classes
# 
build $
$outdir/${grammar}Parser.class $
$outdir/${grammar}Parser$$FileContext.class $
$outdir/${grammar}Parser$$RowContext.class $
: jc $
$outdir/$antlrdir/${grammar}Parser.java 




##############################
# Testing
##############################


# TEST 2
#
# Test with the custom java source
#


#
# build Col.java 
# which contains main()
build $
$outdir/Col.class $
: jc $
$testdir/Col.java $
| $outdir/${grammar}Lexer.class $outdir/${grammar}Parser.class 


#
# Now the code to test it via running the custom test code
#


# RULE: for custom java source
rule test1_r
  command = java --class-path $CLASSPATH Col 1 < test/t.rows
  description = Testing via custom java code and a sample file for column 1

# BUILD: 
#
# run via ninja do_test1
build $
do_test1 $
: test1_r $
| $outdir/Col.class


# RULE: for custom java source
rule test2_r
  command = java --class-path $CLASSPATH Col 2 < test/t.rows
  description = Testing via custom java code and a sample file for column 2

# BUILD: 
#
# run via ninja do_test2
build $
do_test2 $
: test2_r $
| $outdir/Col.class



# RULE: for custom java source
rule test3_r
  command = java --class-path $CLASSPATH Col 3 < test/t.rows
  description = Testing via custom java code and a sample file for column 3

# BUILD: 
#
# run via ninja do_test3
build $
do_test3 $
: test3_r $
| $outdir/Col.class


