#
# Variables
#
outdir = out
antlrdir = antlr
grammar = LabeledExpr
testdir = test

#
# NOTE: the use of $outdir in the classpath.  This is so that when the 
# testcode is built, it can reference the .class files built earlier.
#
#
# github codespace
#CLASSPATH=.:/workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$antlrdir
# macos terminal
CLASSPATH = .:/Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$antlrdir

# ninja does not respect shell aliases
# github code space
#antlr4 = java -jar /workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir
# macos terminal
antlr4 = java -jar /Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir

# grun
grun = java org.antlr.v4.runtime.misc.TestRig

#
# rules
#

# rule to transform *.g4 files into *java, *.interp and *.tokens files
# $in comes from the build statement which uses this rule.
#
# NOTE: This sample adds the --no-listener and -visitor switch.
#       This fails to build the LabeledExprBaseListener.java
rule antlr_r
  command = $antlr4 -no-listener -visitor $in

# FILES NOT BUILT WHEN antlr4 -no-listener is specified
#$outdir/$antlrdir/LabeledExprBaseListener.java $
#$outdir/$antlrdir/LabeledExprListener.java $
# instead it builds Visitor versions of these two files

#
# rule to compile java code
#
rule jc
  command = javac -d $outdir --class-path $CLASSPATH $in
  description = javac $outdir



#
# Builds
#



build $
$outdir/$antlrdir/${grammar}.interp $
$outdir/$antlrdir/${grammar}.tokens $
$outdir/$antlrdir/${grammar}BaseVisitor.java $
$outdir/$antlrdir/${grammar}Lexer.interp $
$outdir/$antlrdir/${grammar}Lexer.java $
$outdir/$antlrdir/${grammar}Lexer.tokens $
$outdir/$antlrdir/${grammar}Visitor.java $
$outdir/$antlrdir/${grammar}Parser.java $
$outdir/$antlrdir $
: antlr_r $
$antlrdir/${grammar}.g4





#
# depends upon LibExprLexer.java
# Makes single class.
#
build $
$outdir/${grammar}Lexer.class $
: jc $outdir/$antlrdir/${grammar}Lexer.java

#
# depends upon ${grammar}Parser.java
# 
build $
$outdir/${grammar}Parser.class $
$outdir/${grammar}Visitor.class $
$outdir/${grammar}Parser$$ExprContext.class $
$outdir/${grammar}Parser$$ProgContext.class $
$outdir/${grammar}Parser$$StatContext.class $
$outdir/${grammar}Parser$$AddSubContext.class $
$outdir/${grammar}Parser$$AssignContext.class $
$outdir/${grammar}Parser$$BlankContext.class $
$outdir/${grammar}Parser$$IdContext.class $
$outdir/${grammar}Parser$$IntContext.class $
$outdir/${grammar}Parser$$MultDivContext.class $
$outdir/${grammar}Parser$$PrintExprContext.class $
: jc $outdir/$antlrdir/${grammar}Parser.java $



#
# depends upon LabeledExprBaseVisitor.java and LabeledExprVisitor.java. 
# Makes multiple classes
#
build $
$outdir/${grammar}BaseVisitor.class $
: jc $outdir/$antlrdir/${grammar}BaseVisitor.java



#
# Testing
#


# TEST 2
#
# Test with the custom java source
#


# This is for building the test driver using the custom class
#
# depends upon ExprLexer.java/class. 
# Makes single class: ExprJoyRide.class
#
# NOTE: the use of the pipe symbol to specify a dependency which needs
# to be built first.
#
build $
$outdir/Calc.class $
$outdir/EvalVisitor.class $
: jc $testdir/Calc.java $testdir/EvalVisitor.java $
| $outdir/${grammar}Lexer.class


#
# Now the code to test it via running the custom test code
#

# RULE: for grun command line
rule testit_r
  command = java --class-path $CLASSPATH Calc t.expr
  description = Testing the code using custom test code

# BUILD: depends upon the java test code being built
# makes: outdir 
# depends upon $outdir/ExprJoyRide.class
# uses rule testit_r
build $
do_testit $
: testit_r $
| $outdir/Calc.class


