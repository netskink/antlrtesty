#
# Variables
#
outdir = out
srcdir = antlr
grammar = ArrayInit

#
# NOTE: the use of $outdir in the classpath.  This is so that when the 
# testcode is built, it can reference the .class files built earlier.
#
#
# github codespace
#CLASSPATH=.:/workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$srcdir
# macos terminal
CLASSPATH = .:/Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar:$outdir:$outdir/$srcdir

# ninja does not respect shell aliases
# github code space
#antlr4 = java -jar /workspaces/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir
# macos terminal
antlr4 = java -jar /Users/davis/progs/github/antlrtesty/jars/antlr-4.13.1-complete.jar -o $outdir

# grun
grun = java org.antlr.v4.runtime.misc.TestRig



# rule to transform *.g4 files into *java, *.interp and *.tokens files
# $in comes from the build statement which uses this rule.
#
# rule to antlr a grammar (.g4) file
#
rule antlr_r
  command = $antlr4 $in

#
# rule to compile java code
#
rule jc
  command = javac -d $outdir --class-path $CLASSPATH $in
  description = javac $outdir



#
# Build statement to make .java, .tokens and .interp files from .g4
#
build $
$outdir/$srcdir/${grammar}BaseListener.java $
$outdir/$srcdir/${grammar}Parser.java $
$outdir/$srcdir/${grammar}Listener.java $
$outdir/$srcdir/${grammar}Lexer.java $
$outdir/$srcdir/${grammar}.interp $
$outdir/$srcdir/${grammar}Lexer.interp $
$outdir/$srcdir/${grammar}.tokens $
$outdir/$srcdir/${grammar}Lexer.tokens $
$outdir/$srcdir $
: antlr_r $
$srcdir/${grammar}.g4


#
# build rules to make the various java source files
#


#
# Makes single class.
#
build $
$outdir/${grammar}Lexer.class $
: jc $
$outdir/$srcdir/${grammar}Lexer.java

#
# Makes multiple classes pertaining to parser
#
build $
$outdir/${grammar}Parser.class $
$outdir/${grammar}Listener.class $
$outdir/${grammar}Parser$$InitContext.class $
$outdir/${grammar}Parser$$ValueContext.class $
$outdir/${grammar}Parser$$ExprContext.class $
$outdir/${grammar}Parser$$ProgContext.class $
$outdir/${grammar}Parser$$StatContext.class $
: jc $
$outdir/$srcdir/${grammar}Parser.java $



#
# Makes multiple classes pertaining to listener
#
#
build $
$outdir/${grammar}BaseListener.class $
: jc $
$outdir/$srcdir/${grammar}BaseListener.java



#
# Testing
#

# TEST 1
#
# Test with the test TestRig and t.expr
#

rule grun_tree_r
  command = cd $outdir; $grun ${grammar} init -gui ../test/t.expr
  description = launches org.antlr.v4.runtime.misc.TestRig on t.expr

# depends upon the outdir and the ArrayInitParser.class
build $
do_testparse $
: grun_tree_r $
$outdir/${grammar}Parser.class


# TEST 2
#
# Test with the custom java source
#


# This is for building the test driver using the custom class
#
# depends upon ExprLexer.java/class. 
# Makes single class: ExprJoyRide.class
#
# NOTE: the use of the pipe symbol to specify a dependency which needs
# to be built first.
#
#build $
#$outdir/ExprJoyRide.class $
#: jc test/ExprJoyRide.java $
#| $outdir/ArrayInitLexer.class


#
# Now the code to test it via running the custom test code
#

# RULE: for grun command line
#rule testit_r
#  command = java --class-path $CLASSPATH ExprJoyRide t.expr
#  description = Testing the code using custom test code

# BUILD: depends upon the java test code being built
# makes: outdir 
# depends upon $outdir/ExprJoyRide.class
# uses rule testit_r
#build $
#do_testit $
#: testit_r $
#| $outdir/ExprJoyRide.class


# TEST 3
#
# Test with interactive (type in 3+4 and ctrl-D)
# using grun
#

# RULE: for grun command line
#rule test3_r
#  command = cd $outdir; echo "3+4" | $grun ArrayInit prog -tree
#  description = Testing via grun and a sample input 3+4

# BUILD: depends upon the java test code being built
# makes: fake output
# depends upon  $outdir/ArrayInitLexer.class
# uses rule test3_r
#
# run via ninja do_test3
#build $
#do_test3 $
#: test3_r $
#| $outdir/ArrayInitLexer.class


# TEST 4
#
# Test with interactive (type in 3+4 and ctrl-D)
# using the custom test code
#

# RULE: for custom java source
#rule test4_r
#  command = echo "3+4" | java --class-path $CLASSPATH ExprJoyRide 
#  description = Testing via custom java code and a sample input 3+4

# BUILD: depends upon the java test code being built
# makes: fake output
# depends upon  $outdir/ExprJoyRide.class
# uses rule test4_r
#
# run via ninja do_test4
#build $
#do_test4 $
#: test4_r $
#| $outdir/ExprJoyRide.class

# TEST 5
#
# Test with interactive code having errors
# using the custom test code so that we can
# see how it handles parse errors.
#

# RULE: for custom java source
#rule test5_r
#  command = echo "(1+2" | java --class-path $CLASSPATH ExprJoyRide 
#  description = Testing via custom java code and improper input. Missing paren.

# BUILD: depends upon the java test code being built
# makes: fake output
# depends upon  $outdir/ExprJoyRide.class
# uses rule test5_r
#
# run via ninja do_test5
#build $
#do_test5 $
#: test5_r $
#| $outdir/ExprJoyRide.class


# TEST 6
#
# Test with interactive code having errors
# using the grun so that we can
# see how it handles parse errors.
#

# RULE: for grun command line
#rule test6_r
#  command = cd $outdir; echo "(1+2\n33*67" | $grun ArrayInit prog -gui
#  description = Testing via grun and improper input. Missing paren.

# BUILD: depends upon the java test code being built
# makes: fake output
# depends upon  $outdir/ExprJoyRide.class
# uses rule test5_r
#
# run via ninja do_test5
#build $
#do_test6 $
#: test6_r $
#| $outdir/ExprJoyRide.class
